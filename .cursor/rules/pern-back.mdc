---
description: "Regra PERN-backend: aplicar SOLID, padronizar respostas e valida√ß√µes"
globs:
  - "src/controllers/**/*.ts"
  - "src/routes/**/*.ts"
alwaysApply: true
---

# üí° Backend PERN ‚Äî SOLID & Padroniza√ß√£o

Sempre que voc√™ criar ou editar um **Controller** ou uma **Route**:

1. **Single Responsibility**

   - Controllers devem delegar toda l√≥gica de neg√≥cio a classes em `src/services`.

2. **Open/Closed**

   - Para adicionar nova feature, crie um novo Service sem modificar o existente.

3. **Liskov Substitution**

   - Implemente interfaces em `src/repositories` para seus Services, garantindo substituibilidade.

4. **Interface Segregation**

   - Separe interfaces granulares (ex: `IUserRepository`, `ITransactionRepository`).

5. **Dependency Inversion**

   - Controllers e Services dependem de **interfaces**, n√£o de implementa√ß√µes concretas.

6. **ResponseHandler**

   - Use o utilit√°rio `src/lib/ResponseHandler` em vez de chamar `res.status(...).json(...)` diretamente.

7. **Valida√ß√µes com Zod**

   - Coloque todos os schemas em `src/schemas` e valide via middleware gen√©rico em `src/middlewares/validate.ts`.

8. **Error Handler global**
   - Garanta um middleware `src/middlewares/errorHandler.ts` que capture exce√ß√µes e retorne via `ResponseHandler.error()`.

---
